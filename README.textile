<pre><code> .d88b.  d888888b db   dD db       .d88b.   d888b  
.8P  Y8.   `88'   88 ,8P' 88      .8P  Y8. 88' Y8b 
88    88    88    88,8P   88      88    88 88      
88    88    88    88`8b   88      88    88 88  ooo 
`8P  d8'   .88.   88 `88. 88booo. `8b  d8' 88. ~8~ 
 `Y88'Y8 Y888888P YP   YD Y88888P  `Y88P'   Y888P  
</code></pre>

A simplified version of Python's logging module.

Debugging levels, log formatting and log output are preconfigured. 

Django is not required, but it adds some functionality. By default, the logging module's "info" level of messages are dumped into a local file. 
Unless Django's DEBUG setting is set to True, then the logging level is reduced to "debug" and messages are also broadcast through the console.

Inspired by the logging shortcuts in "everyblock_code":http://github.com/brosner/everyblock_code/blob/master/ebdata/ebdata/retrieval/log.py.

h2. Installation

*01. Download the module*

*02. If you want to integrate with Django, add the following variable to settings.py*
<pre><code>LOG_DIRECTORY = './whatever/logs/'</code></pre>

h2. Usage

*Fire it up*
<pre><code>from qiklog import QikLog
logger = QikLog('latimes.whatever')</code></pre>

*Make it sing*
<pre><code>logger.log.warn('WARN')
logger.log.info('INFO')
logger.log.debug('DEBUG')</code></pre>
